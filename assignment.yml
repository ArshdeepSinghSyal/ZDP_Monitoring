---
  - name: Provision Visual (Elasticsearch & Kibana) EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning
    
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: ansible-webserver # Change the security group name here
      image: ami-04cd36852f26a9623 # This is an AMI i created myself
      keypair: my-key # This is one of my keys that i already have in AWS
      region: us-east-2 # Change the Region
      hostpath: "./hosts"
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Launch the new EC2 Instance
        ec2: 
          group: "{{ security_group }}"
          instance_type: "{{ instance_type}}" 
          image: "{{ image }}" 
          wait: true 
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          instance_tags:
            Name: Visual Instance
          count_tag:
            Name: Visual Instance
          exact_count: "{{ count }}"
        register: ec2

      - name: Add new instance to host group
        add_host:
          hostname: "{{ item.public_dns_name }}"
          groupname: visualserver
          ansible_ssh_private_key_file:  "/Users/arsh/Desktop/Z1/{{keypair}}.pem"
          ansible_user: "ec2-user"
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        with_items: 
          - "{{ ec2.instances }}"
          - "{{ ec2.tagged_instances }}"
      
      - name: Wait for SSH to come up
        delegate_to: "{{ item.public_dns_name }}"
        wait_for_connection:
          delay: 10
          timeout: 60
        loop: "{{ ec2.tagged_instances }}"
  




  - name: Install & Configure Elasticsearch & Kibana
    hosts: visualserver
    become: yes
    gather_facts: False
    tags: Installation & Configuration

    vars:
      #elasticsearch_major_version: 5.x
      #elasticsearch_cluster_name: my_cluster
      #elasticsearch_node_name: my_node
      elasticsearch_network_host: visualserver
      elasticsearch_http_port: 9200 
      #kibana_major_version: 5.x
      kibana_server_host: 0.0.0.0
      kibana_server_port: 5601
      kibana_elasticsearch_url: "http://localhost:9200"
     
    tasks:

      - name: Install Java 8
        yum:
          name: java-1.8.0-openjdk-devel
          state: installed

      - name: Add Elasticsearch & Kibana GPG key.
        rpm_key:
          key: https://packages.elastic.co/GPG-KEY-elasticsearch
          state: present

      - name: Add Elasticsearch yum repository.
        template:
          src: elasticsearch.repo.j2
          dest: /etc/yum.repos.d/elasticsearch.repo
          mode: 0644
      
      - name: Add Kibana yum repository.
        template:
          src: kibana.repo.j2
          dest: /etc/yum.repos.d/kibana.repo
          mode: 0644

      - name: Install Elasticsearch.
        yum: 
          name: elasticsearch
          state: installed
      
      - name: Install Kibana.
        yum: 
          name: kibana
          state: installed

      - name: Configure Elasticsearch. (elasticsearch.yml)
        template:
          src: elasticsearch.yml.j2
          dest: /etc/elasticsearch/elasticsearch.yml
          backup: yes
          owner: root
          group: elasticsearch
          mode: 0750

      - name: Configure Elasticsearch. (jvm.options)
        template:
          src: jvm.options.j2
          dest: /etc/elasticsearch/jvm.options
          backup: yes
          owner: root
          group: elasticsearch
          mode: 0750

      - name: Restart Elasticsearch
        service: 
          name: elasticsearch
          state: restarted

      - name: Configure Kibana.
        template:
          src: kibana.yml.j2
          dest: /etc/kibana/kibana.yml
          owner: root
          group: kibana
          mode: 0750
      
      - name: Restart Kibana
        service: 
          name: kibana 
          state: restarted
  
      - name: Start Elasticsearch.
        service: 
          name: elasticsearch 
          state: restarted
          enabled: yes
        ignore_errors: true

      - name: Start Kibana.
        service: 
          name: kibana 
          state: restarted
          enabled: yes
        ignore_errors: true

  





        
  


  
  - name: Provision an (Metricbeat) EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning
    
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: ansible-webserver # Change the security group name here
      image: ami-04cd36852f26a9623 # This is an AMI i created myself
      keypair: my-key # This is one of my keys that i already have in AWS
      region: us-east-2 # Change the Region
      hostpath: "./hosts"
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group   
        ec2_group: 
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 5601
              to_port: 5601
              cidr_ip: 0.0.0.0/0
              rule_desc: kibana  
            - proto: all
              group_name: "{{ security_group }}" 
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      - name: Launch the new EC2 Instance
        ec2: 
          group: "{{ security_group }}"
          instance_type: "{{ instance_type}}" 
          image: "{{ image }}" 
          wait: true 
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          instance_tags:
            Name: Instance
          count_tag:
            Name: Instance
          exact_count: "{{ count }}"
        register: ec2

      - name: Add new instance to host group
        add_host:
          hostname: "{{ item.public_dns_name }}"
          groupname: webserver
          ansible_ssh_private_key_file:  "/Users/arsh/Desktop/Z1/{{keypair}}.pem"
          ansible_user: "ec2-user"
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        with_items: 
          - "{{ ec2.instances }}"
          - "{{ ec2.tagged_instances }}"
      
      - name: Wait for SSH to come up
        delegate_to: "{{ item.public_dns_name }}"
        wait_for_connection:
          delay: 10
          timeout: 60
        loop: "{{ ec2.tagged_instances }}"







  - name: Install & configure, httpd & metricbeat 
    hosts: webserver
    become: true
    gather_facts: False
    tags: Installation & Configuration (httpd & Metricbeat)

    vars:
      #visualserverip:            #put the following in metricbeat.yml.j2- hosts: ["{{visualserverip}}:9200"]
    
    tasks:
      
      - name: Install the latest version of Apache
        yum:
          name: 
            - httpd
            - https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-7.0.1-x86_64.rpm

      - name: Enable metricbeat to monitor httpd service  
        command: metricbeat modules enable apache
      
      - name: Disable metricbeat from monitoring the system
        command: metricbeat modules disable system

      # - name: Insert output for metricbeat to save logs in file   
      #   blockinfile:
      #     path: /etc/metricbeat/metricbeat.yml
      #     block: |
      #       output.file:
      #         path: "/tmp/metricbeat"
      #         filename: metricbeat
      #     insertafter: '#ssl.key: "/etc/pki/client/cert.key"'
      
      # - name: Change existing output to elasticsearch from metricbeat.yml file
      #   lineinfile: 
      #     path: /etc/metricbeat/metricbeat.yml
      #     regexp: '^  hosts: \[\"localhost:9200\"\]'   
      #     line: '  hosts: [ {{ groups["visualserver:9200"] }} ]'
          
      # replace above 2 tasks using jinja file task   
   
      - name: Configure Metricbeat.
        template:
          src: metricbeat.yml.j2
          dest: /etc/metricbeat/metricbeat.yml
          backup: yes
          owner: ec2-user   # root
          group: root    # metricbeat # elasticsearch
          mode: 0600  #0750

      - name: Stop httpd service from running
        systemd:
          state: stopped
          name: httpd
      
      - name: Stop metricbeat service from running
        systemd:
          state: stopped
          name: metricbeat
        
      - name: Make sure httpd service is running
        systemd:
          state: started
          name: httpd
      
      - name: Make sure metricbeat service is running
        systemd:
          state: started
          name: metricbeat
