---
  - name: Create a security group   
    ec2_group: 
      name: "{{ security_group }}"
      description: Security Group for servers
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 5601
          to_port: 5601
          cidr_ip: 0.0.0.0/0
          rule_desc: kibana  
        - proto: all
          group_name: "{{ security_group }}" 
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: basic_firewall

  - name: Launch the new EC2 Instance
    ec2: 
      group: "{{ security_group }}"
      instance_type: "{{ instance_type}}" 
      image: "{{ image }}" 
      wait: true 
      region: "{{ region }}"
      keypair: "{{ keypair }}"
      instance_tags:
        Name: "{{deployment_name}}-Visual Instance"
        role: Visual Instance
        environment: "{{deployment_name}}"
      count_tag:
        Name: "{{deployment_name}}-Visual Instance"
      exact_count: "{{ count }}"
    register: ec2

  # - name: Launch the new EC2 Instance
  #   ec2_instance:
  #     name: New Visual Instance
  #     state: present
  #     region: "{{ region }}"
  #     key_name: "{{ keypair }}"
  #     instance_type: "{{ instance_type}}"
  #     security_group: "{{ security_group }}"
  #     network:
  #       assign_public_ip: true
  #     image_id: "{{ image }}"
  #     tags:
  #       Environment: Visual
  #   register: ec2    

  - name: Add new instance to host group
    add_host:
      hostname: "{{ item.public_dns_name }}"
      groupname: visualserver
      ansible_ssh_private_key_file:  "{{ec2_private_key_file}}"
      ansible_user: "ec2-user"
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    with_items: 
      - "{{ ec2.instances }}"
      - "{{ ec2.tagged_instances }}"
  
  - name: Wait for SSH to come up
    delegate_to: "{{ item.public_dns_name }}"
    wait_for_connection:
      delay: 10
      timeout: 60
    loop: "{{ ec2.instances }}"

#   - name: get hostname
#     command: hostname
#     register: hostname

#   - name: Setup password-less ssh
#     known_hosts:
#         path: /etc/ssh/ssh_known_hosts
#         name: "{{hostname.stdout}}"
#         key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"